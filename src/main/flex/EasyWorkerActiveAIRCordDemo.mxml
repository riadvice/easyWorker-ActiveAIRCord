<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   creationComplete="app_creationComplete_handler(event)">

	<fx:Script>
		<![CDATA[
			import com.doublefx.as3.thread.Thread;
			import com.doublefx.as3.thread.api.IThread;
			import com.doublefx.as3.thread.event.ThreadFaultEvent;
			import com.doublefx.as3.thread.event.ThreadResultEvent;
			import com.riadvice.activeaircord.Configuration;
			import com.riadvice.activeaircord.Model;

			import conf.DBConf;

			import models.Employee;

			import mx.core.FlexGlobals;

			import mx.events.FlexEvent;

			import workers.AIRCordThread;

			import workers.GetEmployeesWorker;

			private var thread:IThread;

			private function app_creationComplete_handler(event:FlexEvent):void
			{
				Configuration.presistencePackage = "models";
				// Use this key to decrypt the database
				Configuration.setEncryptionKeyFor(DBConf.CONNECTION_EMPLOYEES, DBConf.getEnryptionKey());
				Configuration.connections = { "employees": "sqlite://sqlite/employees.db?mode=read" };
			}

			protected function buttonEmployeesApp_clickHandler(event:MouseEvent):void
			{
				var employees:* = Employee[Model.FIND_BY_SQL]("SELECT FirstName, LastName FROM Employees GROUP BY EmployeeID");
				displayEmployees(employees);
			}

			protected function buttonEmployeesThread_clickHandler(event:MouseEvent):void
			{
				const models:Vector.<String> = Vector.<String>([ "models.Employee" ]);
				thread = new AIRCordThread(GetEmployeesWorker, "getEmployeesWorker", DBConf.getEnryptionKey(true), models);

				thread.addEventListener(ThreadResultEvent.RESULT, onDbWorkerReady);
				thread.addEventListener(ThreadFaultEvent.FAULT, thread_faultHandler);

				thread.start();
			}

			private function onDbWorkerReady(event:ThreadResultEvent):void
			{
				const employees:* = event.result;
				displayEmployees(employees);

				trace(event);
				thread.terminate();
			}

			private function thread_faultHandler(event:ThreadFaultEvent):void
			{
				const error:Error = event.fault;
				resultArea.text = "Error" + error.message;
				thread.terminate();
			}

			private function displayEmployees(employees:*):void
			{
				resultArea.text = "";
				for each (var employee:* in employees)
				{
					resultArea.appendText(employee["FirstName"] + " " + employee["LastName"] + "\n");
				}
			}
		]]>
	</fx:Script>

	<s:VGroup>
		<s:Button id="buttonEmployeesApp"
				  label="Get All Employees Application Level"
				  click="buttonEmployeesApp_clickHandler(event)"/>
		<s:Button id="buttonEmployeesThread"
				  label="Get All Employees Using A Thread"
				  click="buttonEmployeesThread_clickHandler(event)"/>

		<s:TextArea id="resultArea"/>
	</s:VGroup>

</s:WindowedApplication>
